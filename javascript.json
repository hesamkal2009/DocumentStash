"//#region //! Default Imports",
"",
"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';",
"import { createSelector } from 'reselect';",
"import { apiCallBegan, apiCallSuccess, apiCallFailed } from './_actions/api';",
"import moment from 'moment';",
"import config from '../config.json';",
"",
"//#endregion",
"",
"//#region //* Custom Imports",
"",
"//* Any Custom Imports related to Action Wrappers and Selectors goes here",
"",
"//#endregion",
"",
"//#region //* Action Wrappers",
"",
"export const get${2:Name}s = () => (dispatch, getState) => {",
"    const { list, lastFetched } = getState().entities.${1:name}s;",
"",
"    if (list && list.length >= 0) {",
"        const diffInMinutes = moment().diff(moment(lastFetched), 'minutes');",
"        if (diffInMinutes < 10) return;",
"    }",
"",
"    return dispatch(",
"        apiCallBegan({",
"            url: config.${1:name}s.urls.get,",
"            onStart: ${1:name}sRequested.type,",
"            onSuccess: ${1:name}sReceived.type,",
"            onError: ${1:name}sRequestFailed.type,",
"        })",
"    );",
"};",
"",
"//#endregion",
"",
"//#region //* Selectors",
"",
"export const get${2:Name}sCount = createSelector(",
"    (state) => state.entities.${1:name}s.list.length",
");",
"export const getAll${2:Name}s = createSelector((state) => state.entities.${1:name}s.list);",
"",
"//#endregion",
"",
"//! *****",
"//! *****",
"//! *****",
"",
"//#region //! State Initialization",
"",
"const initialState = {",
"    loading: false,",
"    list: [],",
"    lastFetched: 0,",
"};",
"",
"//#endregion",
"",
"//* ---",
"//! NO NEED TO USE THESE THUNKS WHEN YOU GOT AN API MIDDLEWARE",
"//* ---",
"//#region //! Async Only Thunks",
"",
"export const doActionAsync = createAsyncThunk(",
"    '${1:name}/fetchCount',",
"    async (params) => {",
"        const response = await customApiCall(params);",
"        // The response we return becomes the `fulfilled` action payload",
"        return response.data;",
"    }",
");",
"",
"const customApiCall = (params) => {",
"    return new Promise((resolve) =>",
"        setTimeout(() => resolve({ data: params }), 500)",
"    );",
"};",
"",
"//#endregion",
"",
"//#region //! Custom Thunks - To Perform Sync & Async Operations",
"",
"export const doAction = (params) => (dispatch, getState) => {",
"    const currentValue = get${2:Name}s(getState());",
"    dispatch(${1:name}sReceived());",
"};",
"",
"//#endregion",
"",
"//#region //! Slice",
"",
"const ${1:name} = createSlice({",
"    name: '${1:name}',",
"",
"    initialState,",
"",
"    reducers: {",
"        ${1:name}sRequested: (${1:name}s, action) => {",
"            ${1:name}s.loading = action.payload;",
"        },",
"        ${1:name}sReceived: (${1:name}s, action) => {",
"            ${1:name}s.list = action.payload;",
"            ${1:name}s.loading = false;",
"            ${1:name}s.lastFetched = Date.now();",
"        },",
"        ${1:name}sRequestFailed: (${1:name}s, action) => {",
"            ${1:name}s.loading = false;",
"        },",
"    },",
"",
"    // The `extraReducers` field lets the slice handle actions defined elsewhere,",
"    // including actions generated by createAsyncThunk or in other slices.",
"    extraReducers: (builder) => {",
"        builder",
"            .addCase(doActionAsync.pending, (${1:name}s) => {",
"                ${1:name}s.loading = true;",
"            })",
"            .addCase(doActionAsync.fulfilled, (${1:name}s, action) => {",
"                ${1:name}s.loading = false;",
"                ${1:name}s.list = action.payload;",
"            })",
"            .addCase(doActionAsync.rejected, (${1:name}s, action) => {",
"                ${1:name}s.loading = false; // Alert ${1:name}",
"            });",
"    },",
"});",
"",
"//#endregion",
"",
"//#region //! Exports",
"",
"const { ${1:name}sRequested, ${1:name}sReceived, ${1:name}sRequestFailed } = ${1:name}.actions;",
"export default ${1:name}.reducer;",
"",
"//#endregion"
