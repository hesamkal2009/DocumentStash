{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	//     "prefix": "log",
	//     "body": [
	//         "console.log('$1');",
	//         "$2"
	//     ],
	//     "description": "Log output to console"
	// }

	"HK Redux Template": {
		"prefix": ["dux", "ducks", "reducks", "hk-redux-template"],
		"description": "It's a very neat and sophisticated way of creating redux files following the Docks approach and it really appeals to me",
		"body": [
			"//#region //! Default Imports",
			"",
			"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';",
			"import { createSelector } from 'reselect';",
			"import { apiCallBegan, apiCallSuccess, apiCallFailed } from './_actions/api';",
			"import moment from 'moment';",
			"import config from '../config.json';",
			"",
			"//#endregion",
			"",
			"//#region //* Custom Imports",
			"",
			"//* Any Custom Imports related to Action Wrappers and Selectors goes here",
			"",
			"//#endregion",
			"",
			"//#region //* Action Wrappers",
			"",
			"export const getPosts = () => (dispatch, getState) => {",
			"    const { list, lastFetched } = getState().entities.posts;",
			"",
			"    if (list && list.length >= 0) {",
			"        const diffInMinutes = moment().diff(moment(lastFetched), 'minutes');",
			"        if (diffInMinutes < 10) return;",
			"    }",
			"",
			"    return dispatch(",
			"        apiCallBegan({",
			"            url: config.posts.urls.get,",
			"            onStart: postsRequested.type,",
			"            onSuccess: postsReceived.type,",
			"            onError: postsRequestFailed.type,",
			"        })",
			"    );",
			"};",
			"",
			"//#endregion",
			"",
			"//#region //* Selectors",
			"",
			"export const selectPosts = (state) => state.entities.posts.list;",
			"export const selectPostsCount = (state) => state.entities.posts.list.length;",
			"",
			"export const selectPostsFor${2:Name}Id = (${1:name}Id) =>",
			"    createSelector(",
			"        (state) => state.entities.posts.list,",
			"        (list) => list.filter((post) => post.${1:name}Id === ${1:name}Id)",
			"    );",
			"//#endregion",
			"",
			"//! *****",
			"//! *****",
			"//! *****",
			"",
			"//#region //! State Initialization",
			"",
			"const initialState = {",
			"    list: [],",
			"    loading: false,",
			"    lastFetched: null,",
			"};",
			"",
			"//#endregion",
			"",
			"//* ---",
			"//! NO NEED TO USE THESE THUNKS WHEN YOU GOT AN API MIDDLEWARE",
			"//* ---",
			"//#region //! Async Only Thunks",
			"",
			"export const doActionAsync = createAsyncThunk(",
			"    'post/fetchCount',",
			"    async (params) => {",
			"        const response = await customApiCall(params);",
			"        // The response we return becomes the `fulfilled` action payload",
			"        return response.data;",
			"    }",
			");",
			"",
			"const customApiCall = (params) => {",
			"    return new Promise((resolve) =>",
			"        setTimeout(() => resolve({ data: params }), 500)",
			"    );",
			"};",
			"",
			"//#endregion",
			"",
			"//#region //! Custom Thunks - To Perform Sync & Async Operations",
			"",
			"export const doAction = (params) => (dispatch, getState) => {",
			"    const currentValue = getPosts(getState());",
			"    dispatch(postsReceived());",
			"};",
			"",
			"//#endregion",
			"",
			"//#region //! Slice",
			"",
			"const post = createSlice({",
			"    name: 'post',",
			"",
			"    initialState,",
			"",
			"    reducers: {",
			"        postsRequested: (posts, action) => {",
			"            posts.loading = action.payload;",
			"        },",
			"        postsReceived: (posts, action) => {",
			"            posts.list = action.payload;",
			"            posts.loading = false;",
			"            posts.lastFetched = Date.now();",
			"        },",
			"        postsRequestFailed: (posts, action) => {",
			"            posts.loading = false;",
			"        },",
			"    },",
			"",
			"    // The `extraReducers` field lets the slice handle actions defined elsewhere,",
			"    // including actions generated by createAsyncThunk or in other slices.",
			"    extraReducers: (builder) => {",
			"        builder",
			"            .addCase(doActionAsync.pending, (posts) => {",
			"                posts.loading = true;",
			"            })",
			"            .addCase(doActionAsync.fulfilled, (posts, action) => {",
			"                posts.loading = false;",
			"                posts.list = action.payload;",
			"            })",
			"            .addCase(doActionAsync.rejected, (posts, action) => {",
			"                posts.loading = false; // Alert post",
			"            });",
			"    },",
			"});",
			"",
			"//#endregion",
			"",
			"//#region //! Exports",
			"",
			"const { postsRequested, postsReceived, postsRequestFailed } = post.actions;",
			"export default post.reducer;",
			"",
			"//#endregion"
		]
	},
	"HK Arrow Function With Export": {
		"prefix": ["excon", "excons", "exconst"],
		"description": "My Personal Arrow Function Creator Which Also Export",
		"body": ["export const ${1:functionName} = () => {", "    ${2}", "}"]
	},
	"HK Reducer Wrapper": {
		"prefix": "reducer-wrapper",
		"description": "Generates default reducer wrapper",
		"body": [
			"import { combineReducers } from 'redux';",
			"import products from './product';",
			"",
			"export default combineReducers({",
			"    products,",
			"});"
		]
	},
	"HK Reducers": {
		"prefix": "reducer-entities-wrapper",
		"description": "Generates entities objects that wraps reducers",
		"body": [
			"import { combineReducers } from 'redux';",
			"import rootReducer from './_rootReducer';",
			"",
			"export default combineReducers({",
			"    entities: rootReducer,",
			"});"
		]
	},
	"HK CreateStore": {
		"prefix": "create-store",
		"description": "Generates default store",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit';",
			"import thunk from 'redux-thunk';",
			"import logger from './middlewares/logger';",
			"import api from './middlewares/api';",
			"import reducer from './_reducer';",
			"",
			"export const store = configureStore({",
			"    reducer,",
			"    middleware: (getDefaultMiddleware) =>",
			"        getDefaultMiddleware().concat(logger).concat(thunk).concat(api),",
			"    devTools: process.env.NODE_ENV !== 'production',",
			"});"
		]
	},
	"HK Connect Component To Dispatch And State": {
		"prefix": ["concom", "connect-component"],
		"description": "Connects Components to Dispatch and State",
		"body": [
			"import { callFor${2:Name}s, get${2:Name}sCount } from '../../app/${1:name}s';",
			"import { connect } from 'react-redux';",
			"import { withRouter } from 'react-router';",
			"import ${2:Name} from './${2:Name}';",
			"",
			"function mapDispatchToProps(dispatch) {",
			"    return {",
			"        callFor${2:Name}s: () => {",
			"            dispatch(callFor${2:Name}s());",
			"        },",
			"    };",
			"}",
			"",
			"function mapStateToProps(state, ownProps) {",
			"    return {",
			"        get${2:Name}sCount: get${2:Name}sCount(),",
			"        state,",
			"    };",
			"}",
			"",
			"// * https://stackoverflow.com/questions/49384270/does-order-in-which-you-wrap-component-with-connect-and-withrouter-matter",
			"export const ${2:Name}Connect = withRouter(",
			"    connect(mapStateToProps, mapDispatchToProps)(${2:Name})",
			");"
		]
	},
	"HK Star As Actions Import": {
		"prefix": ["star-as-action", "act-import"],
		"description": "Imporst everything as actions",
		"body": "import * as actions from '../app/${1:path}';"
	}
}
